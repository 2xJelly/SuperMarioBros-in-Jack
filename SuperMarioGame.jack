class SuperMarioGame
{
	field Mario mario;
	field Map map;
	field Monster monster;
	field int direction; // 0 = At rest, 1 = Left, 2 = Right
	field int screenPos;
	field int fps;

	field char key;
	field boolean win, exit;
	field int coin, score, time;
	field int framePassed;
	field int frameMon;
	field int effect;
	field int MonLeft;
	field int MonRight;
	field boolean ulti;
	field int x, xx, y, yy; // For storing marioX, marioY, monX, monY

	// Just for Debug, variables for debug
	field int debug1, debug2, debug3;

	constructor SuperMarioGame new(int gameSpeed)
	{
		// Set fps first, cuz menu() needs it
		let fps = gameSpeed;
		// fps -> frame per second

		// Do the starting menu
		do menu();

		do Screen.clearScreen();
		do MATH.init();
		do Sprite.init();

		let win = false;
		let mario = Mario.new(0, 208);
		let map = Map.new();
		let monster = Monster.new();
		let screenPos = 0;
		let ulti = true;

		return this;
	}

	method void menu()
	{
		let exit = false;

		// Show the text
		do Output.moveCursor(15, 20);
		do Output.printString("Press any key to Start");

		// Starting Menu
		while (~exit)
		{
			// Read an input from the user
			let key = Keyboard.keyPressed();

			// Now we have an input from the user
			if( ~(key=0) ) // Any key
			{
				let exit = true;
				let effect = 6;
				while(effect > -1)
				{
					// Erase the text
					do Sys.wait(10000/fps);
					// do Sys.wait(10000/(fps/10));
					do Screen.setColor(false);
					do Screen.drawRectangle(0, 165, 511, 175); // Character is 11 pixels in height

					// Show the text
					do Sys.wait(10000/fps);
					// do Sys.wait(10000/(fps/10));
					do Output.moveCursor(15, 20);
					do Output.printString("Press any key to Start");

					let effect = effect -1;
				}
			}
		}

		return;
	}

	method void run()
	{
		var int idx;
		var int switch;
		let key = 0;
		let exit = false;
		let coin = 0;
		let score = 0;
		let time = 999;
		let framePassed = fps;
		let frameMon = fps/30;

		do Output.moveCursor(0, 0);
		do Output.printString("Coin: ");
		do Output.printInt(coin);

		do Output.moveCursor(0, 25);
		do Output.printString("SCORE: ");
		do Output.printInt(score);

		do Output.moveCursor(0, 53);
		do Output.printString("TIME: ");
		do Output.printInt(time);

		// Just For Debug, try printBin and printBinRev
		/*
		let debug1 = -32767;
		let debug1 = debug1-1;
		do MATH.printBin(debug1, 1);
		do MATH.printBinRev(debug1, 2);
		*/

		// Just For Debug, try l_Shift and r_Shift
		/*
		let debug1 = 0;
		while(debug1 < 16)
		{
			// let debug2 = MATH.l_Shift(-1, debug1);
			let debug2 = MATH.r_Shift(-1, debug1);
			do MATH.printBin(debug2, debug1+1);
			let debug1 = debug1+1;
		}
		*/

		// While Reading in the users command, react to it according to our rules
		while(~exit)
		{
			// Just For Debug, output the current coordinate of Mario
			/*
			do Output.moveCursor(1, 0);
			do Output.printString("Pos: (");
			do Output.printInt(mario.getPosX());
			do Output.printString(", ");
			do Output.printInt(mario.getPosY());
			do Output.printString(")");
			*/
			let idx = monster.getMonLeft();
			// Read an input from the user
			let key = Keyboard.keyPressed();

			// Now we have an input from the user
			if(key = 81) { let exit = true; } // q key
			if(key = 130) { let direction = 1; } // Left arrow
			if(key = 132) { let direction = 2; } // right arrow
			/***if(key = 133)
			{

				if(((mario.getPosX()+screenPos) > 1168) & ((mario.getPosX()+screenPos) < 1184) & (mario.getPosY() = 144))
				{
					let screenPos = 6400;
					do map.MapChange();
					do monster.screenPosChange();
				}
			}***/
			if((key = 32) & marioOnGround() ) // Spacebar, and Mario is on the ground
			{ do mario.jump(); }

			// Now move Mario if Mario is not touching any block
			do move();
			// If Mario reach the bottom, game over!!!
			if (239 < mario.getPosY() )
			{
				let effect = 3;
				do mario.jump();
				while(effect > -1)
				{
					do Sys.wait(10000/fps);
					do mario.erase();
					do Sys.wait(10000/fps);
					do mario.draw();
					let effect = effect -1;
				}
				do mario.erase();
				let exit = true;
			}

			// Do Transition of map if needed
			if (mario.getPosX() > 383) { do transition(32); }

			// Do teleport if Mario is at the pipe, and push 'down' key
			if ( (key = 133) & (~((mario.getPosX()+screenPos)<1168)) & ((mario.getPosX()+screenPos)<1184) & (mario.getPosY() = 144) )
			{ do transition(6400 - (mario.getPosX()+screenPos) ); }


			// Wait for 1 frame to pass
			do Sys.wait(1000/fps);

			let framePassed = framePassed - 1;
			let frameMon = frameMon - 1;
			// If framePassed <= 0, 1 second has passes
			if(~(framePassed > 0) )
			{
				let time = time - 1;
				let framePassed = fps;
				// Also, print the time since it has changed
				do Output.moveCursor(0, 53);
				do Output.printString("TIME: ");
				do Output.printInt(time);
			}

			// Monster move 2 pixel per 0.02 second
			if(~(frameMon > 0))
			{
				do Monmove();
				let frameMon = fps/30;
			}

			/* one for one monster for update kill or die*/
			while(idx < monster.getMonRight())
			{
				let switch = monster.getMontype(idx);
				let x = mario.getPosX() + screenPos;
				let y = mario.getPosY();
				let xx = monster.getMonX(idx);
				let yy = monster.getMonY(idx);

				// If this is a left/right flower monster
				if ((switch = 1) | (switch = 2))
				{
					// If Mario touches the plant Monster, he dies
					if ( (-16 < (x-xx)) & ((x-xx) < 16) & (-17 < (y-yy)) & ((y-yy) < 17) )
					{ do marioDeath(); }
				}

				// If this is a (normal/upward/downward) monster
				if ((switch = 0) | (switch = 3) | (switch = 4))
				{
					// If Mario steps on the Monster, kill them
					if ( (-16 < (x-xx)) & ((x-xx) < 16) & (-17 < (y-yy)) & ((y-yy) < 0) )
					{
						do mario.jump();
						do monster.kill(idx);
					}else
					{
						// Else if Mario touches the monster
						// (Minor Bug) : Touching the corner of a Monster counts as touching it
						if ( (-17 < (x-xx)) & ((x-xx) < 17) & (-17 < (y-yy)) & ((y-yy) < 17) )
						{
							// If Mario has ulti, kill them
							if (ulti)
							{
								do mario.jump();
								do monster.kill(idx);
							}else { do marioDeath(); } // Else, Mario is death
						}
					}
				}

				/*if monster drop into the gap,kill the monster*/
				if (239 < yy)
				{ do monster.kill(idx); }

				let idx = idx + 1;
			}

			// If Mario haven't die,
			// and Mario reach this interval, you WIN ~~
			if ( (~(exit)) & (7000 < (screenPos + mario.getPosX()) ) & ((screenPos + mario.getPosX()) < 7200) )
			{
				let win = true;
				let exit = true;
			}
		}

		// The game ends, clear the screen
		do Screen.clearScreen();

		do Output.moveCursor(15, 25);
		// WIN
		if (win) { do Output.printString("You Rock~~~"); }
		// LOSE
		else { do Output.printString("You Suck!!!"); }

		// Just For Debug, Remove the text
		/*
		do Screen.setColor(false);
		do Screen.drawRectangle(0, 165, 511, 175); // Character is 11 pixels in height
		*/

		return;
	}

	method void marioDeath()
	{
		let effect = 3;
		do mario.jump();
		while(effect > -1)
		{
			do Sys.wait(10000/fps);
			do mario.erase();
			do Sys.wait(10000/fps);
			do mario.draw();
			let effect = effect -1;
		}
		do mario.erase();
		let exit = true;

		return;
	}

	method boolean marioOnGround()
	{
		var boolean onG;
		let onG = false;
		if(map.touchGround(mario.getPosX()+screenPos, mario.getPosY()) ) { let onG = true; }
		if(map.touchBelow(mario.getPosX()+screenPos, mario.getPosY()) ) { let onG = true; }

		return onG;
	}

	// Move the appropriate direction according to the key(direction)
  method void move()
  {
		let x = mario.getPosX() + screenPos;
		let y = mario.getPosY();

		// If Mario is not touching left/right, let Mario move left/right
    if ((key = 130) & (~map.touchLeftSides(x, y)) & (map.touchLeft(x, y) = false) ) { do mario.moveLeft(); }
    if ((key = 132) & (~map.touchRightSides(x, y)) & (map.touchRight(x, y) = false) ) { do mario.moveRight(); }

		// If Mario is jumping, and there is a block above him, Mario will stop jumping
		if ( mario.isJump() )
		{ if (map.touchAbove(x, y)) { do mario.stopJump(); } }
		// Why don't put the inside if into the upper if bracket?
		// Cuz if we enter touchAbove, we must make sure mario is jumping
		// So that the function inside touchAbove can automatically remove the touching block above

    // If Mario is not jumping, let Mario fall
    if ( (~mario.isJump()) & (marioOnGround() = false))
    { do mario.moveDown(); }

    // If Mario is still jumping, let Mario moves up
    if (mario.isJump())
    {
      do mario.moveUp();
      do mario.jumpLess();
    }

    return;
  }

  method void Monmove()
  {
	  var int idx;
	  var int switch;
	  let idx = monster.getMonLeft();
	  // look one for one monster for update monster moving
	  while(idx < monster.getMonRight())
		{
	  	let switch = monster.getMontype(idx);
			let xx = monster.getMonX(idx);
			let yy = monster.getMonY(idx);

			// If this is a normal monster
	  	if(switch = 0)
			{
	  		// If monster touch leftside of block, let the direction = right
	  		if(map.touchLeft(xx, yy) = true)
	  		{ do monster.changeRight(idx); }

	  		// If monster touch rightside of block, let the direction = left
	  		if(map.touchRight(xx, yy) = true)
	  		{ do monster.changeLeft(idx); }

				// If there is a monster to the left of this current Monster, and they are touching
	  		if( (idx > monster.getMonLeft()) & ((xx-monster.getMonX(idx-1)) < 17) & (yy = monster.getMonY(idx-1)) )
	  		{
					// Let the left block's direction = left
					// Let the right block's direction = right
		  		do monster.changeLeft(idx-1);
		  		do monster.changeRight(idx);
	  		}

	  		// If monster touch the rightside of screen, let the direction = left
	  		if(xx-screenPos > 490) { do monster.changeLeft(idx); }

	  		// If monster not on the ground, let monster fall
	  		if((map.touchBelow(xx,yy) = false) & (map.touchGround(xx,yy) = false))
				{ do monster.movedown(idx); }
	  		else // Else, Let monster move at it's own direction
	  		{
		  		do monster.eraseidxMonster(idx);
		  		do monster.update(idx);
		  		do monster.drawidxMonster(idx);
				}
	  	}

	  	// Let flying monster move down
	  	if(switch = 3)
	  	{
				if(monster.getMonY(idx) < 144)
				{ do monster.changedown(idx); }
				else { do monster.moveup(idx); }
	  	}

	  	// Let flying monster move up
	  	if(switch = 4)
	  	{
				if(monster.getMonY(idx) > 204)
				{ do monster.changeup(idx); }
				else{do monster.movedown(idx);}
	  	}

			/*
	   	if (idx = 2)
	   	{
	 			do Output.moveCursor(2, 0);
	 			do Output.printString("PosY : ");
	 			do Output.printInt(monster.getMonY(idx));
	   	}
			*/
	  	let idx = idx + 1;
	  }
	  return;
  }


	// Move the map to the right by move pixels
	method void transition(int move)
	{
		do mario.erase();
		do monster.eraseMonster();
		do map.erase();
    do map.eraseGround();

		let screenPos = screenPos + move;

		if (move = 32) { do mario.transition(-move); } // If this is a normal moveScreen
		else { do mario.transition(move); } // If this is a teleport moveScreen
		do monster.transition(move);
		do map.transition(move);

		do mario.draw();
		do monster.drawMonster();
		do map.draw();
    do map.drawGround();

		return;
	}
}
