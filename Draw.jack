class Draw
{

	function void character(int location) {
	var int memAddress;
	let memAddress = 16384+location;
	do Memory.poke(memAddress+0, 224);
	do Memory.poke(memAddress+32, 792);
	do Memory.poke(memAddress+64, 1028);
	do Memory.poke(memAddress+96, 1284);
	do Memory.poke(memAddress+128, 2050);
	do Memory.poke(memAddress+160, 2050);
	do Memory.poke(memAddress+192, 1988);
	do Memory.poke(memAddress+224, 1028);
	do Memory.poke(memAddress+256, 792);
	do Memory.poke(memAddress+288, 3302);
	do Memory.poke(memAddress+320, 5125);
	do Memory.poke(memAddress+352, 5125);
	do Memory.poke(memAddress+384, 6141);
	do Memory.poke(memAddress+416, 5125);
	do Memory.poke(memAddress+448, 1028);
	do Memory.poke(memAddress+480, 3084);
	return;
}

function void character2(int location) {
	var int memAddress;
	let memAddress = 16384+location;
	do Memory.poke(memAddress+0, 1792);
	do Memory.poke(memAddress+32, 6336);
	do Memory.poke(memAddress+64, 8224);
	do Memory.poke(memAddress+96, 8352);
	do Memory.poke(memAddress+128, 16400);
	do Memory.poke(memAddress+160, 16400);
	do Memory.poke(memAddress+192, 9184);
	do Memory.poke(memAddress+224, 8224);
	do Memory.poke(memAddress+256, 6336);
	do Memory.poke(memAddress+288, 26416);
	do Memory.poke(memAddress+320, -24536);
	do Memory.poke(memAddress+352, -24536);
	do Memory.poke(memAddress+384, -16408);
	do Memory.poke(memAddress+416, -24536);
	do Memory.poke(memAddress+448, 8224);
	do Memory.poke(memAddress+480, 12336);
	return;
}

	method void flowerleft(int location) {
	var int memAddress;
	let memAddress = 16384+location;
	do Memory.poke(memAddress+0, 8704);
	do Memory.poke(memAddress+32, 17408);
	do Memory.poke(memAddress+64, -29184);
	do Memory.poke(memAddress+96, 7680);
	do Memory.poke(memAddress+128, 15104);
	do Memory.poke(memAddress+160, -256);
	do Memory.poke(memAddress+192, 16128);
	do Memory.poke(memAddress+224, 15872);
	do Memory.poke(memAddress+256, -3584);
	do Memory.poke(memAddress+288, -1024);
	do Memory.poke(memAddress+320, -4096);
	do Memory.poke(memAddress+352, -512);
	do Memory.poke(memAddress+384, 16640);
	do Memory.poke(memAddress+416, 25344);
	do Memory.poke(memAddress+448, -512);
	do Memory.poke(memAddress+480, -16384);
	return;
}

	method void flowerright(int location) {
	var int memAddress;
	let memAddress = 16384+location;
	do Memory.poke(memAddress+0, 68);
	do Memory.poke(memAddress+32, 34);
	do Memory.poke(memAddress+64, 113);
	do Memory.poke(memAddress+96, 88);
	do Memory.poke(memAddress+128, 252);
	do Memory.poke(memAddress+160, 255);
	do Memory.poke(memAddress+192, 255);
	do Memory.poke(memAddress+224, 103);
	do Memory.poke(memAddress+256, 103);
	do Memory.poke(memAddress+288, 63);
	do Memory.poke(memAddress+320, 15);
	do Memory.poke(memAddress+352, 127);
	do Memory.poke(memAddress+384, 130);
	do Memory.poke(memAddress+416, 198);
	do Memory.poke(memAddress+448, 127);
	do Memory.poke(memAddress+480, 3);
	return;
}

    method void brick(int location) {
	    var int memAddress;
        let memAddress = 16384+location;
	    do Memory.poke(memAddress+0, -129);
	    do Memory.poke(memAddress+32, -129);
	    do Memory.poke(memAddress+64, -129);
	    do Memory.poke(memAddress+96, -129);
	    do Memory.poke(memAddress+128, -129);
	    do Memory.poke(memAddress+160, 0);
	    do Memory.poke(memAddress+192, -2057);
	    do Memory.poke(memAddress+224, -2057);
	    do Memory.poke(memAddress+256, -2057);
	    do Memory.poke(memAddress+288, -2057);
	    do Memory.poke(memAddress+320, 0);
	    do Memory.poke(memAddress+352, -513);
	    do Memory.poke(memAddress+384, -513);
	    do Memory.poke(memAddress+416, -513);
	    do Memory.poke(memAddress+448, -513);
	    do Memory.poke(memAddress+480, -513);
	    return;
    }

    method void question(int location) {
	var int memAddress;
    let memAddress = 16384+location;
	do Memory.poke(memAddress+0, -1);
	do Memory.poke(memAddress+32, -1);
	do Memory.poke(memAddress+64, -8197);
	do Memory.poke(memAddress+96, -2017);
	do Memory.poke(memAddress+128, -3121);
	do Memory.poke(memAddress+160, -3121);
	do Memory.poke(memAddress+192, -3121);
	do Memory.poke(memAddress+224, -3073);
	do Memory.poke(memAddress+256, -1793);
	do Memory.poke(memAddress+288, -385);
	do Memory.poke(memAddress+320, -385);
	do Memory.poke(memAddress+352, -1);
	do Memory.poke(memAddress+384, -385);
	do Memory.poke(memAddress+416, -8581);
	do Memory.poke(memAddress+448, -1);
	do Memory.poke(memAddress+480, -1);
	return;
    }


	method void square(int location) {
	var int memAddress;
	let memAddress = 16384+location;
	do Memory.poke(memAddress+0, -1);
	do Memory.poke(memAddress+32, -1);
	do Memory.poke(memAddress+64, -4081);
	do Memory.poke(memAddress+96, -4081);
	do Memory.poke(memAddress+128, -16381);
	do Memory.poke(memAddress+160, -16381);
	do Memory.poke(memAddress+192, -16381);
	do Memory.poke(memAddress+224, -16381);
	do Memory.poke(memAddress+256, -16381);
	do Memory.poke(memAddress+288, -16381);
	do Memory.poke(memAddress+320, -16381);
	do Memory.poke(memAddress+352, -16381);
	do Memory.poke(memAddress+384, -4081);
	do Memory.poke(memAddress+416, -4081);
	do Memory.poke(memAddress+448, -1);
	do Memory.poke(memAddress+480, -1);
	return;
	}

	method void monster(int location) {
	var int memAddress;
	let memAddress = 16384+location;
	do Memory.poke(memAddress+0, 384);
	do Memory.poke(memAddress+32, 2016);
	do Memory.poke(memAddress+64, -4105);
	do Memory.poke(memAddress+96, -24583);
	do Memory.poke(memAddress+128, -26215);
	do Memory.poke(memAddress+160, -18019);
	do Memory.poke(memAddress+192, -16387);
	do Memory.poke(memAddress+224, -8185);
	do Memory.poke(memAddress+256, 24582);
	do Memory.poke(memAddress+288, 32766);
	do Memory.poke(memAddress+320, 16380);
	do Memory.poke(memAddress+352, 16380);
	do Memory.poke(memAddress+384, 4080);
	do Memory.poke(memAddress+416, 3696);
	do Memory.poke(memAddress+448, 3696);
	do Memory.poke(memAddress+480, 15996);
	return;
}


	method void coin(int location) {
		var int memAddress;
		let memAddress = 16384+location;
		do Memory.poke(memAddress+0, 2016);
		do Memory.poke(memAddress+32, 3640);
		do Memory.poke(memAddress+64, 6152);
		do Memory.poke(memAddress+96, 6604);
		do Memory.poke(memAddress+128, 12612);
		do Memory.poke(memAddress+160, 12614);
		do Memory.poke(memAddress+192, 24898);
		do Memory.poke(memAddress+224, 24898);
		do Memory.poke(memAddress+256, 24898);
		do Memory.poke(memAddress+288, 24898);
		do Memory.poke(memAddress+320, 24898);
		do Memory.poke(memAddress+352, 12614);
		do Memory.poke(memAddress+384, 12740);
		do Memory.poke(memAddress+416, 6156);
		do Memory.poke(memAddress+448, 7736);
		do Memory.poke(memAddress+480, 2016);
		return;
		}

	method void wall(int location) {
	var int memAddress;
	let memAddress = 16384+location;
	do Memory.poke(memAddress+0, 0);
	do Memory.poke(memAddress+32, 16380);
	do Memory.poke(memAddress+64, 24570);
	do Memory.poke(memAddress+96, 28662);
	do Memory.poke(memAddress+128, 28686);
	do Memory.poke(memAddress+160, 30702);
	do Memory.poke(memAddress+192, 30702);
	do Memory.poke(memAddress+224, 30702);
	do Memory.poke(memAddress+256, 30702);
	do Memory.poke(memAddress+288, 30702);
	do Memory.poke(memAddress+320, 30702);
	do Memory.poke(memAddress+352, 28686);
	do Memory.poke(memAddress+384, 28662);
	do Memory.poke(memAddress+416, 24570);
	do Memory.poke(memAddress+448, 16380);
	do Memory.poke(memAddress+480, 0);
	return;
	}

	method void land(int location) {
	var int memAddress;
	let memAddress = 16384+location;
	do Memory.poke(memAddress+0, -33);
	do Memory.poke(memAddress+32, -65);
	do Memory.poke(memAddress+64, -129);
	do Memory.poke(memAddress+96, -257);
	do Memory.poke(memAddress+128, -513);
	do Memory.poke(memAddress+160, -1025);
	do Memory.poke(memAddress+192, 2047);
	do Memory.poke(memAddress+224, -2049);
	do Memory.poke(memAddress+256, -2049);
	do Memory.poke(memAddress+288, -2049);
	do Memory.poke(memAddress+320, -2050);
	do Memory.poke(memAddress+352, -1027);
	do Memory.poke(memAddress+384, -4613);
	do Memory.poke(memAddress+416, -8457);
	do Memory.poke(memAddress+448, -16529);
	do Memory.poke(memAddress+480, -97);
	return;
}

	method void pipetopleft(int location) {
	var int memAddress;
	let memAddress = 16384+location;
	do Memory.poke(memAddress+0, -1);
	do Memory.poke(memAddress+32, -1);
	do Memory.poke(memAddress+64, -1);
	do Memory.poke(memAddress+96, -1);
	do Memory.poke(memAddress+128, -1);
	do Memory.poke(memAddress+160, -1);
	do Memory.poke(memAddress+192, -1);
	do Memory.poke(memAddress+224, -1);
	do Memory.poke(memAddress+256, -1);
	do Memory.poke(memAddress+288, -1);
	do Memory.poke(memAddress+320, -1);
	do Memory.poke(memAddress+352, -1);
	do Memory.poke(memAddress+384, -1);
	do Memory.poke(memAddress+416, -1);
	do Memory.poke(memAddress+448, -2);
	do Memory.poke(memAddress+480, 0);
	return;
}

	method void pipetopright(int location) {
	var int memAddress;
	let memAddress = 16384+location;
	do Memory.poke(memAddress+0, -1);
	do Memory.poke(memAddress+32, -1);
	do Memory.poke(memAddress+64, -1);
	do Memory.poke(memAddress+96, -1);
	do Memory.poke(memAddress+128, -1);
	do Memory.poke(memAddress+160, -1);
	do Memory.poke(memAddress+192, -1);
	do Memory.poke(memAddress+224, -1);
	do Memory.poke(memAddress+256, -1);
	do Memory.poke(memAddress+288, -1);
	do Memory.poke(memAddress+320, -1);
	do Memory.poke(memAddress+352, -1);
	do Memory.poke(memAddress+384, -1);
	do Memory.poke(memAddress+416, -1);
	do Memory.poke(memAddress+448, 32767);
	do Memory.poke(memAddress+480, 0);
	return;
}

	method void pipeleft(int location) {
	var int memAddress;
	let memAddress = 16384+location;
	do Memory.poke(memAddress+0, -8);
	do Memory.poke(memAddress+32, -8);
	do Memory.poke(memAddress+64, -8);
	do Memory.poke(memAddress+96, -8);
	do Memory.poke(memAddress+128, -8);
	do Memory.poke(memAddress+160, -8);
	do Memory.poke(memAddress+192, -8);
	do Memory.poke(memAddress+224, -8);
	do Memory.poke(memAddress+256, -8);
	do Memory.poke(memAddress+288, -8);
	do Memory.poke(memAddress+320, -8);
	do Memory.poke(memAddress+352, -8);
	do Memory.poke(memAddress+384, -8);
	do Memory.poke(memAddress+416, -8);
	do Memory.poke(memAddress+448, -8);
	do Memory.poke(memAddress+480, -8);
	return;
}

	method void piperight(int location) {
	var int memAddress;
	let memAddress = 16384+location;
	do Memory.poke(memAddress+0, 8191);
	do Memory.poke(memAddress+32, 8191);
	do Memory.poke(memAddress+64, 8191);
	do Memory.poke(memAddress+96, 8191);
	do Memory.poke(memAddress+128, 8191);
	do Memory.poke(memAddress+160, 8191);
	do Memory.poke(memAddress+192, 8191);
	do Memory.poke(memAddress+224, 8191);
	do Memory.poke(memAddress+256, 8191);
	do Memory.poke(memAddress+288, 8191);
	do Memory.poke(memAddress+320, 8191);
	do Memory.poke(memAddress+352, 8191);
	do Memory.poke(memAddress+384, 8191);
	do Memory.poke(memAddress+416, 8191);
	do Memory.poke(memAddress+448, 8191);
	do Memory.poke(memAddress+480, 8191);
	return;
}

	method void cloudleftup(int location) {
	var int memAddress;
	let memAddress = 16384+location;
	do Memory.poke(memAddress+0, 0);
	do Memory.poke(memAddress+32, 0);
	do Memory.poke(memAddress+64, 0);
	do Memory.poke(memAddress+96, 0);
	do Memory.poke(memAddress+128, 0);
	do Memory.poke(memAddress+160, 0);
	do Memory.poke(memAddress+192, 0);
	do Memory.poke(memAddress+224, 0);
	do Memory.poke(memAddress+256, -16384);
	do Memory.poke(memAddress+288, 8192);
	do Memory.poke(memAddress+320, 6144);
	do Memory.poke(memAddress+352, 1024);
	do Memory.poke(memAddress+384, 1024);
	do Memory.poke(memAddress+416, 1024);
	do Memory.poke(memAddress+448, 25088);
	do Memory.poke(memAddress+480, 4352);
	return;
}

method void cloudleftdown(int location) {
	var int memAddress;
	let memAddress = 16384+location;
	do Memory.poke(memAddress+0, 224);
	do Memory.poke(memAddress+32, 16);
	do Memory.poke(memAddress+64, 8);
	do Memory.poke(memAddress+96, 0);
	do Memory.poke(memAddress+128, 6);
	do Memory.poke(memAddress+160, 1);
	do Memory.poke(memAddress+192, 1);
	do Memory.poke(memAddress+224, 2);
	do Memory.poke(memAddress+256, 36);
	do Memory.poke(memAddress+288, 584);
	do Memory.poke(memAddress+320, -14448);
	do Memory.poke(memAddress+352, -1008);
	do Memory.poke(memAddress+384, 12512);
	do Memory.poke(memAddress+416, -32512);
	do Memory.poke(memAddress+448, 17920);
	do Memory.poke(memAddress+480, 14336);
	return;
}

method void cloudrightup(int location) {
	var int memAddress;
	let memAddress = 16384+location;
	do Memory.poke(memAddress+0, 0);
	do Memory.poke(memAddress+32, 0);
	do Memory.poke(memAddress+64, 0);
	do Memory.poke(memAddress+96, 0);
	do Memory.poke(memAddress+128, 0);
	do Memory.poke(memAddress+160, 0);
	do Memory.poke(memAddress+192, 0);
	do Memory.poke(memAddress+224, 0);
	do Memory.poke(memAddress+256, 3);
	do Memory.poke(memAddress+288, 4);
	do Memory.poke(memAddress+320, 8);
	do Memory.poke(memAddress+352, 40);
	do Memory.poke(memAddress+384, 80);
	do Memory.poke(memAddress+416, 130);
	do Memory.poke(memAddress+448, 132);
	do Memory.poke(memAddress+480, 128);
	return;
}

method void cloudrightdown(int location) {
	var int memAddress;
	let memAddress = 16384+location;
	do Memory.poke(memAddress+0, 2304);
	do Memory.poke(memAddress+32, 5376);
	do Memory.poke(memAddress+64, 4608);
	do Memory.poke(memAddress+96, 20480);
	do Memory.poke(memAddress+128, -24576);
	do Memory.poke(memAddress+160, -32767);
	do Memory.poke(memAddress+192, -32767);
	do Memory.poke(memAddress+224, 16384);
	do Memory.poke(memAddress+256, 8194);
	do Memory.poke(memAddress+288, 16385);
	do Memory.poke(memAddress+320, -32701);
	do Memory.poke(memAddress+352, -32706);
	do Memory.poke(memAddress+384, 24604);
	do Memory.poke(memAddress+416, 6400);
	do Memory.poke(memAddress+448, 1731);
	do Memory.poke(memAddress+480, 60);
	return;
}

	method void jumper(int location) {
	var int memAddress;
	let memAddress = 16384+location;
	do Memory.poke(memAddress+0, -1);
	do Memory.poke(memAddress+32, -1);
	do Memory.poke(memAddress+64, 2064);
	do Memory.poke(memAddress+96, 6168);
	do Memory.poke(memAddress+128, 8196);
	do Memory.poke(memAddress+160, 24582);
	do Memory.poke(memAddress+192, 8196);
	do Memory.poke(memAddress+224, 6168);
	do Memory.poke(memAddress+256, 2064);
	do Memory.poke(memAddress+288, 1632);
	do Memory.poke(memAddress+320, -1);
	do Memory.poke(memAddress+352, 32639);
	do Memory.poke(memAddress+384, 32639);
	do Memory.poke(memAddress+416, 0);
	do Memory.poke(memAddress+448, -2057);
	do Memory.poke(memAddress+480, -2057);
	return;
}

// 	method void pipeleftbot(int location) {
// 	var int memAddress;
// 	let memAddress = 16384+location;
// 	do Memory.poke(memAddress+0, -1);
// 	do Memory.poke(memAddress+32, -1);
// 	do Memory.poke(memAddress+64, -1);
// 	do Memory.poke(memAddress+96, -1);
// 	do Memory.poke(memAddress+128, -1);
// 	do Memory.poke(memAddress+160, -1);
// 	do Memory.poke(memAddress+192, -1);
// 	do Memory.poke(memAddress+224, -1);
// 	do Memory.poke(memAddress+256, -1);
// 	do Memory.poke(memAddress+288, -1);
// 	do Memory.poke(memAddress+320, -1);
// 	do Memory.poke(memAddress+352, -1);
// 	do Memory.poke(memAddress+384, -1);
// 	do Memory.poke(memAddress+416, -1);
// 	do Memory.poke(memAddress+448, 32767);
// 	do Memory.poke(memAddress+480, 16383);
// 	return;
//     }

// 	method void pipelefttop(int location) {
// 	var int memAddress;
// 	let memAddress = 16384+location;
// 	do Memory.poke(memAddress+0, 16383);
// 	do Memory.poke(memAddress+32, 32767);
// 	do Memory.poke(memAddress+64, -1);
// 	do Memory.poke(memAddress+96, -1);
// 	do Memory.poke(memAddress+128, -1);
// 	do Memory.poke(memAddress+160, -1);
// 	do Memory.poke(memAddress+192, -1);
// 	do Memory.poke(memAddress+224, -1);
// 	do Memory.poke(memAddress+256, -1);
// 	do Memory.poke(memAddress+288, -1);
// 	do Memory.poke(memAddress+320, -1);
// 	do Memory.poke(memAddress+352, -1);
// 	do Memory.poke(memAddress+384, -1);
// 	do Memory.poke(memAddress+416, -1);
// 	do Memory.poke(memAddress+448, -1);
// 	do Memory.poke(memAddress+480, -1);
// 	return;
//     }

// 	method void piperighttop(int location) {
// 	var int memAddress;
// 	let memAddress = 16384+location;
// 	do Memory.poke(memAddress+0, 0);
// 	do Memory.poke(memAddress+32, 0);
// 	do Memory.poke(memAddress+64, -1);
// 	do Memory.poke(memAddress+96, -1);
// 	do Memory.poke(memAddress+128, -1);
// 	do Memory.poke(memAddress+160, -1);
// 	do Memory.poke(memAddress+192, -1);
// 	do Memory.poke(memAddress+224, -1);
// 	do Memory.poke(memAddress+256, -1);
// 	do Memory.poke(memAddress+288, -1);
// 	do Memory.poke(memAddress+320, -1);
// 	do Memory.poke(memAddress+352, -1);
// 	do Memory.poke(memAddress+384, -1);
// 	do Memory.poke(memAddress+416, -1);
// 	do Memory.poke(memAddress+448, -1);
// 	do Memory.poke(memAddress+480, -1);
// 	return;

//     }

// 	method void piperightbot(int location) {
// 	var int memAddress;
// 	let memAddress = 16384+location;
// 	do Memory.poke(memAddress+0, -1);
// 	do Memory.poke(memAddress+32, -1);
// 	do Memory.poke(memAddress+64, -1);
// 	do Memory.poke(memAddress+96, -1);
// 	do Memory.poke(memAddress+128, -1);
// 	do Memory.poke(memAddress+160, -1);
// 	do Memory.poke(memAddress+192, -1);
// 	do Memory.poke(memAddress+224, -1);
// 	do Memory.poke(memAddress+256, -1);
// 	do Memory.poke(memAddress+288, -1);
// 	do Memory.poke(memAddress+320, -1);
// 	do Memory.poke(memAddress+352, -1);
// 	do Memory.poke(memAddress+384, -1);
// 	do Memory.poke(memAddress+416, -1);
// 	do Memory.poke(memAddress+448, 0);
// 	do Memory.poke(memAddress+480, 0);
// 	return;
//     }

// 	method void pipeconnecttop(int location) {
// 	var int memAddress;
// 	let memAddress = 16384+location;
// 	do Memory.poke(memAddress+0, -4);
// 	do Memory.poke(memAddress+32, -4);
// 	do Memory.poke(memAddress+64, -1);
// 	do Memory.poke(memAddress+96, -1);
// 	do Memory.poke(memAddress+128, -1);
// 	do Memory.poke(memAddress+160, -1);
// 	do Memory.poke(memAddress+192, -1);
// 	do Memory.poke(memAddress+224, -1);
// 	do Memory.poke(memAddress+256, -1);
// 	do Memory.poke(memAddress+288, -1);
// 	do Memory.poke(memAddress+320, -1);
// 	do Memory.poke(memAddress+352, -1);
// 	do Memory.poke(memAddress+384, -1);
// 	do Memory.poke(memAddress+416, -1);
// 	do Memory.poke(memAddress+448, -1);
// 	do Memory.poke(memAddress+480, -1);
// 	return;
// }

// method void pipeconnectbot(int location) {
// 	var int memAddress;
// 	let memAddress = 16384+location;
// 	do Memory.poke(memAddress+0, -1);
// 	do Memory.poke(memAddress+32, -1);
// 	do Memory.poke(memAddress+64, -1);
// 	do Memory.poke(memAddress+96, -1);
// 	do Memory.poke(memAddress+128, -1);
// 	do Memory.poke(memAddress+160, -1);
// 	do Memory.poke(memAddress+192, -1);
// 	do Memory.poke(memAddress+224, -1);
// 	do Memory.poke(memAddress+256, -1);
// 	do Memory.poke(memAddress+288, -1);
// 	do Memory.poke(memAddress+320, -1);
// 	do Memory.poke(memAddress+352, -1);
// 	do Memory.poke(memAddress+384, -1);
// 	do Memory.poke(memAddress+416, -1);
// 	do Memory.poke(memAddress+448, -4);
// 	do Memory.poke(memAddress+480, -4);
// 	return;
// }

method void castle1(int location) {
	var int memAddress;
	let memAddress = 16384+location;
	do Memory.poke(memAddress+0, -256);
	do Memory.poke(memAddress+32, -256);
	do Memory.poke(memAddress+64, -256);
	do Memory.poke(memAddress+96, -256);
	do Memory.poke(memAddress+128, 3840);
	do Memory.poke(memAddress+160, 3840);
	do Memory.poke(memAddress+192, 3840);
	do Memory.poke(memAddress+224, 3840);
	do Memory.poke(memAddress+256, 3840);
	do Memory.poke(memAddress+288, 3840);
	do Memory.poke(memAddress+320, 3840);
	do Memory.poke(memAddress+352, 3840);
	do Memory.poke(memAddress+384, 3840);
	do Memory.poke(memAddress+416, 3840);
	do Memory.poke(memAddress+448, 3840);
	do Memory.poke(memAddress+480, 3840);
	return;
}

method void castle2(int location) {
	var int memAddress;
	let memAddress = 16384+location;
	do Memory.poke(memAddress+0, -241);
	do Memory.poke(memAddress+32, -241);
	do Memory.poke(memAddress+64, -241);
	do Memory.poke(memAddress+96, -241);
	do Memory.poke(memAddress+128, 4095);
	do Memory.poke(memAddress+160, 4095);
	do Memory.poke(memAddress+192, 4095);
	do Memory.poke(memAddress+224, 4095);
	do Memory.poke(memAddress+256, 0);
	do Memory.poke(memAddress+288, 0);
	do Memory.poke(memAddress+320, 0);
	do Memory.poke(memAddress+352, 0);
	do Memory.poke(memAddress+384, 4080);
	do Memory.poke(memAddress+416, 4080);
	do Memory.poke(memAddress+448, 4080);
	do Memory.poke(memAddress+480, 4080);
	return;
}

method void castle3(int location) {
	var int memAddress;
	let memAddress = 16384+location;
	do Memory.poke(memAddress+0, -3841);
	do Memory.poke(memAddress+32, -3841);
	do Memory.poke(memAddress+64, -3841);
	do Memory.poke(memAddress+96, -3841);
	do Memory.poke(memAddress+128, -16);
	do Memory.poke(memAddress+160, -16);
	do Memory.poke(memAddress+192, -16);
	do Memory.poke(memAddress+224, -16);
	do Memory.poke(memAddress+256, 0);
	do Memory.poke(memAddress+288, 0);
	do Memory.poke(memAddress+320, 0);
	do Memory.poke(memAddress+352, 0);
	do Memory.poke(memAddress+384, 4080);
	do Memory.poke(memAddress+416, 4080);
	do Memory.poke(memAddress+448, 4080);
	do Memory.poke(memAddress+480, 4080);
	return;
}

method void castle4(int location) {
	var int memAddress;
	let memAddress = 16384+location;
	do Memory.poke(memAddress+0, 255);
	do Memory.poke(memAddress+32, 255);
	do Memory.poke(memAddress+64, 255);
	do Memory.poke(memAddress+96, 255);
	do Memory.poke(memAddress+128, 240);
	do Memory.poke(memAddress+160, 240);
	do Memory.poke(memAddress+192, 240);
	do Memory.poke(memAddress+224, 240);
	do Memory.poke(memAddress+256, 240);
	do Memory.poke(memAddress+288, 240);
	do Memory.poke(memAddress+320, 240);
	do Memory.poke(memAddress+352, 240);
	do Memory.poke(memAddress+384, 240);
	do Memory.poke(memAddress+416, 240);
	do Memory.poke(memAddress+448, 240);
	do Memory.poke(memAddress+480, 240);
	return;
}

method void castle5(int location) {
	var int memAddress;
	let memAddress = 16384+location;
	do Memory.poke(memAddress+0, 3840);
	do Memory.poke(memAddress+32, 3840);
	do Memory.poke(memAddress+64, 3840);
	do Memory.poke(memAddress+96, 3840);
	do Memory.poke(memAddress+128, 3840);
	do Memory.poke(memAddress+160, 3840);
	do Memory.poke(memAddress+192, 3840);
	do Memory.poke(memAddress+224, 3840);
	do Memory.poke(memAddress+256, -1);
	do Memory.poke(memAddress+288, -1);
	do Memory.poke(memAddress+320, -1);
	do Memory.poke(memAddress+352, -1);
	do Memory.poke(memAddress+384, -4081);
	do Memory.poke(memAddress+416, -4081);
	do Memory.poke(memAddress+448, -4081);
	do Memory.poke(memAddress+480, -4081);
	return;
}

method void castle6(int location) {
	var int memAddress;
	let memAddress = 16384+location;
	do Memory.poke(memAddress+0, 4080);
	do Memory.poke(memAddress+32, 4080);
	do Memory.poke(memAddress+64, 4080);
	do Memory.poke(memAddress+96, 4080);
	do Memory.poke(memAddress+128, 0);
	do Memory.poke(memAddress+160, 0);
	do Memory.poke(memAddress+192, 0);
	do Memory.poke(memAddress+224, 0);
	do Memory.poke(memAddress+256, -256);
	do Memory.poke(memAddress+288, -256);
	do Memory.poke(memAddress+320, -256);
	do Memory.poke(memAddress+352, -256);
	do Memory.poke(memAddress+384, 3840);
	do Memory.poke(memAddress+416, 3840);
	do Memory.poke(memAddress+448, 3840);
	do Memory.poke(memAddress+480, 3840);
	return;
}

method void castle7(int location) {
	var int memAddress;
	let memAddress = 16384+location;
	do Memory.poke(memAddress+0, 4080);
	do Memory.poke(memAddress+32, 4080);
	do Memory.poke(memAddress+64, 4080);
	do Memory.poke(memAddress+96, 4080);
	do Memory.poke(memAddress+128, 0);
	do Memory.poke(memAddress+160, 0);
	do Memory.poke(memAddress+192, 0);
	do Memory.poke(memAddress+224, 0);
	do Memory.poke(memAddress+256, 255);
	do Memory.poke(memAddress+288, 255);
	do Memory.poke(memAddress+320, 255);
	do Memory.poke(memAddress+352, 255);
	do Memory.poke(memAddress+384, 240);
	do Memory.poke(memAddress+416, 240);
	do Memory.poke(memAddress+448, 240);
	do Memory.poke(memAddress+480, 240);
	return;
}

method void castle8(int location) {
	var int memAddress;
	let memAddress = 16384+location;
	do Memory.poke(memAddress+0, 240);
	do Memory.poke(memAddress+32, 240);
	do Memory.poke(memAddress+64, 240);
	do Memory.poke(memAddress+96, 240);
	do Memory.poke(memAddress+128, 240);
	do Memory.poke(memAddress+160, 240);
	do Memory.poke(memAddress+192, 240);
	do Memory.poke(memAddress+224, 240);
	do Memory.poke(memAddress+256, -1);
	do Memory.poke(memAddress+288, -1);
	do Memory.poke(memAddress+320, -1);
	do Memory.poke(memAddress+352, -1);
	do Memory.poke(memAddress+384, -4081);
	do Memory.poke(memAddress+416, -4081);
	do Memory.poke(memAddress+448, -4081);
	do Memory.poke(memAddress+480, -4081);
	return;
}

method void castle9(int location) {
	var int memAddress;
	let memAddress = 16384+location;
	do Memory.poke(memAddress+0, -4081);
	do Memory.poke(memAddress+32, -4081);
	do Memory.poke(memAddress+64, -4081);
	do Memory.poke(memAddress+96, -4081);
	do Memory.poke(memAddress+128, 15);
	do Memory.poke(memAddress+160, 15);
	do Memory.poke(memAddress+192, 15);
	do Memory.poke(memAddress+224, 15);
	do Memory.poke(memAddress+256, 15);
	do Memory.poke(memAddress+288, 15);
	do Memory.poke(memAddress+320, 15);
	do Memory.poke(memAddress+352, 15);
	do Memory.poke(memAddress+384, 15);
	do Memory.poke(memAddress+416, 15);
	do Memory.poke(memAddress+448, 15);
	do Memory.poke(memAddress+480, 15);
	return;
}

method void castle10(int location) {
	var int memAddress;
	let memAddress = 16384+location;
	do Memory.poke(memAddress+0, 4095);
	do Memory.poke(memAddress+32, 4095);
	do Memory.poke(memAddress+64, 4095);
	do Memory.poke(memAddress+96, 4095);
	do Memory.poke(memAddress+128, -4096);
	do Memory.poke(memAddress+160, -4096);
	do Memory.poke(memAddress+192, -4096);
	do Memory.poke(memAddress+224, -4096);
	do Memory.poke(memAddress+256, -256);
	do Memory.poke(memAddress+288, -256);
	do Memory.poke(memAddress+320, -256);
	do Memory.poke(memAddress+352, -256);
	do Memory.poke(memAddress+384, -256);
	do Memory.poke(memAddress+416, -256);
	do Memory.poke(memAddress+448, -256);
	do Memory.poke(memAddress+480, -256);
	return;
}

method void castle11(int location) {
	var int memAddress;
	let memAddress = 16384+location;
	do Memory.poke(memAddress+0, -16);
	do Memory.poke(memAddress+32, -16);
	do Memory.poke(memAddress+64, -16);
	do Memory.poke(memAddress+96, -16);
	do Memory.poke(memAddress+128, 15);
	do Memory.poke(memAddress+160, 15);
	do Memory.poke(memAddress+192, 15);
	do Memory.poke(memAddress+224, 15);
	do Memory.poke(memAddress+256, 255);
	do Memory.poke(memAddress+288, 255);
	do Memory.poke(memAddress+320, 255);
	do Memory.poke(memAddress+352, 255);
	do Memory.poke(memAddress+384, 255);
	do Memory.poke(memAddress+416, 255);
	do Memory.poke(memAddress+448, 255);
	do Memory.poke(memAddress+480, 255);
	return;
}

method void castle12(int location) {
	var int memAddress;
	let memAddress = 16384+location;
	do Memory.poke(memAddress+0, -4081);
	do Memory.poke(memAddress+32, -4081);
	do Memory.poke(memAddress+64, -4081);
	do Memory.poke(memAddress+96, -4081);
	do Memory.poke(memAddress+128, -4096);
	do Memory.poke(memAddress+160, -4096);
	do Memory.poke(memAddress+192, -4096);
	do Memory.poke(memAddress+224, -4096);
	do Memory.poke(memAddress+256, -4096);
	do Memory.poke(memAddress+288, -4096);
	do Memory.poke(memAddress+320, -4096);
	do Memory.poke(memAddress+352, -4096);
	do Memory.poke(memAddress+384, -4096);
	do Memory.poke(memAddress+416, -4096);
	do Memory.poke(memAddress+448, -4096);
	do Memory.poke(memAddress+480, -4096);
	return;
}

method void castle13(int location) {
	var int memAddress;
	let memAddress = 16384+location;
	do Memory.poke(memAddress+0, 15);
	do Memory.poke(memAddress+32, 15);
	do Memory.poke(memAddress+64, 15);
	do Memory.poke(memAddress+96, 15);
	do Memory.poke(memAddress+128, 15);
	do Memory.poke(memAddress+160, 15);
	do Memory.poke(memAddress+192, 15);
	do Memory.poke(memAddress+224, 15);
	do Memory.poke(memAddress+256, 15);
	do Memory.poke(memAddress+288, 15);
	do Memory.poke(memAddress+320, 15);
	do Memory.poke(memAddress+352, 15);
	do Memory.poke(memAddress+384, -1);
	do Memory.poke(memAddress+416, -1);
	do Memory.poke(memAddress+448, -1);
	do Memory.poke(memAddress+480, -1);
	return;
}

method void castle14(int location) {
	var int memAddress;
	let memAddress = 16384+location;
	do Memory.poke(memAddress+0, -256);
	do Memory.poke(memAddress+32, -256);
	do Memory.poke(memAddress+64, -256);
	do Memory.poke(memAddress+96, -256);
	do Memory.poke(memAddress+128, -256);
	do Memory.poke(memAddress+160, -256);
	do Memory.poke(memAddress+192, -256);
	do Memory.poke(memAddress+224, -256);
	do Memory.poke(memAddress+256, -256);
	do Memory.poke(memAddress+288, -256);
	do Memory.poke(memAddress+320, -256);
	do Memory.poke(memAddress+352, -256);
	do Memory.poke(memAddress+384, -1);
	do Memory.poke(memAddress+416, -1);
	do Memory.poke(memAddress+448, -1);
	do Memory.poke(memAddress+480, -1);
	return;
}

method void castle15(int location) {
	var int memAddress;
	let memAddress = 16384+location;
	do Memory.poke(memAddress+0, 255);
	do Memory.poke(memAddress+32, 255);
	do Memory.poke(memAddress+64, 255);
	do Memory.poke(memAddress+96, 255);
	do Memory.poke(memAddress+128, 255);
	do Memory.poke(memAddress+160, 255);
	do Memory.poke(memAddress+192, 255);
	do Memory.poke(memAddress+224, 255);
	do Memory.poke(memAddress+256, 255);
	do Memory.poke(memAddress+288, 255);
	do Memory.poke(memAddress+320, 255);
	do Memory.poke(memAddress+352, 255);
	do Memory.poke(memAddress+384, -1);
	do Memory.poke(memAddress+416, -1);
	do Memory.poke(memAddress+448, -1);
	do Memory.poke(memAddress+480, -1);
	return;
}

method void castle16(int location) {
	var int memAddress;
	let memAddress = 16384+location;
	do Memory.poke(memAddress+0, -4096);
	do Memory.poke(memAddress+32, -4096);
	do Memory.poke(memAddress+64, -4096);
	do Memory.poke(memAddress+96, -4096);
	do Memory.poke(memAddress+128, -4096);
	do Memory.poke(memAddress+160, -4096);
	do Memory.poke(memAddress+192, -4096);
	do Memory.poke(memAddress+224, -4096);
	do Memory.poke(memAddress+256, -4096);
	do Memory.poke(memAddress+288, -4096);
	do Memory.poke(memAddress+320, -4096);
	do Memory.poke(memAddress+352, -4096);
	do Memory.poke(memAddress+384, -1);
	do Memory.poke(memAddress+416, -1);
	do Memory.poke(memAddress+448, -1);
	do Memory.poke(memAddress+480, -1);
	return;
}

	function void eraseblock(int location) {
	var int memAddress;
	let memAddress = 16384+location;
	do Memory.poke(memAddress+0, 0);
	do Memory.poke(memAddress+32, 0);
	do Memory.poke(memAddress+64, 0);
	do Memory.poke(memAddress+96, 0);
	do Memory.poke(memAddress+128, 0);
	do Memory.poke(memAddress+160, 0);
	do Memory.poke(memAddress+192, 0);
	do Memory.poke(memAddress+224, 0);
	do Memory.poke(memAddress+256, 0);
	do Memory.poke(memAddress+288, 0);
	do Memory.poke(memAddress+320, 0);
	do Memory.poke(memAddress+352, 0);
	do Memory.poke(memAddress+384, 0);
	do Memory.poke(memAddress+416, 0);
	do Memory.poke(memAddress+448, 0);
	do Memory.poke(memAddress+480, 0);
	return;
	}

	method void life(int location) {
	var int memAddress;
	let memAddress = 16384+location;
	do Memory.poke(memAddress+0, 14364);
	do Memory.poke(memAddress+32, 31806);
	do Memory.poke(memAddress+64, -385);
	do Memory.poke(memAddress+96, -1);
	do Memory.poke(memAddress+128, -1);
	do Memory.poke(memAddress+160, -1);
	do Memory.poke(memAddress+192, -1);
	do Memory.poke(memAddress+224, -1);
	do Memory.poke(memAddress+256, 32766);
	do Memory.poke(memAddress+288, 16380);
	do Memory.poke(memAddress+320, 8184);
	do Memory.poke(memAddress+352, 4080);
	do Memory.poke(memAddress+384, 2016);
	do Memory.poke(memAddress+416, 960);
	do Memory.poke(memAddress+448, 384);
	do Memory.poke(memAddress+480, 0);
	return;
}

method void mushroom(int location) {
	var int memAddress;
	let memAddress = 16384+location;
	do Memory.poke(memAddress+0, 2016);
	do Memory.poke(memAddress+32, 6648);
	do Memory.poke(memAddress+64, 8676);
	do Memory.poke(memAddress+96, 17394);
	do Memory.poke(memAddress+128, 17946);
	do Memory.poke(memAddress+160, -1009);
	do Memory.poke(memAddress+192, -13297);
	do Memory.poke(memAddress+224, -31731);
	do Memory.poke(memAddress+256, -31207);
	do Memory.poke(memAddress+288, -12295);
	do Memory.poke(memAddress+320, -3);
	do Memory.poke(memAddress+352, 29262);
	do Memory.poke(memAddress+384, 10836);
	do Memory.poke(memAddress+416, 9252);
	do Memory.poke(memAddress+448, 5064);
	do Memory.poke(memAddress+480, 4080);
	return;
}

method void star(int location) {
	var int memAddress;
	let memAddress = 16384+location;
	do Memory.poke(memAddress+0, 384);
	do Memory.poke(memAddress+32, 960);
	do Memory.poke(memAddress+64, 1056);
	do Memory.poke(memAddress+96, 2064);
	do Memory.poke(memAddress+128, -4081);
	do Memory.poke(memAddress+160, -31711);
	do Memory.poke(memAddress+192, 19026);
	do Memory.poke(memAddress+224, 8196);
	do Memory.poke(memAddress+256, 4104);
	do Memory.poke(memAddress+288, 2640);
	do Memory.poke(memAddress+320, 4488);
	do Memory.poke(memAddress+352, 8196);
	do Memory.poke(memAddress+384, 18402);
	do Memory.poke(memAddress+416, 18450);
	do Memory.poke(memAddress+448, 28686);
	do Memory.poke(memAddress+480, 0);
	return;
}

method void flag(int location) {
	var int memAddress;
	let memAddress = 16384+location;
	do Memory.poke(memAddress+0, -1);
	do Memory.poke(memAddress+32, 32767);
	do Memory.poke(memAddress+64, 16263);
	do Memory.poke(memAddress+96, 8127);
	do Memory.poke(memAddress+128, 4031);
	do Memory.poke(memAddress+160, 1983);
	do Memory.poke(memAddress+192, 955);
	do Memory.poke(memAddress+224, 387);
	do Memory.poke(memAddress+256, 255);
	do Memory.poke(memAddress+288, 127);
	do Memory.poke(memAddress+320, 63);
	do Memory.poke(memAddress+352, 31);
	do Memory.poke(memAddress+384, 15);
	do Memory.poke(memAddress+416, 7);
	do Memory.poke(memAddress+448, 3);
	do Memory.poke(memAddress+480, 1);
	return;
}

method void pole(int location) {
	var int memAddress;
	let memAddress = 16384+location;
	do Memory.poke(memAddress+0, 1);
	do Memory.poke(memAddress+32, 1);
	do Memory.poke(memAddress+64, 1);
	do Memory.poke(memAddress+96, 1);
	do Memory.poke(memAddress+128, 1);
	do Memory.poke(memAddress+160, 1);
	do Memory.poke(memAddress+192, 1);
	do Memory.poke(memAddress+224, 1);
	do Memory.poke(memAddress+256, 1);
	do Memory.poke(memAddress+288, 1);
	do Memory.poke(memAddress+320, 1);
	do Memory.poke(memAddress+352, 1);
	do Memory.poke(memAddress+384, 1);
	do Memory.poke(memAddress+416, 1);
	do Memory.poke(memAddress+448, 1);
	do Memory.poke(memAddress+480, 1);
	return;
}

	method void dispose()
	{
		return;
	}

}
