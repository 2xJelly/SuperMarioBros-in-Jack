class Draw
{

	method void flowerleft(int location) {
	var int memAddress;
	let memAddress = 16384+location;
	do Memory.poke(memAddress+0, 8704);
	do Memory.poke(memAddress+32, 17408);
	do Memory.poke(memAddress+64, -29184);
	do Memory.poke(memAddress+96, 7680);
	do Memory.poke(memAddress+128, 15104);
	do Memory.poke(memAddress+160, -256);
	do Memory.poke(memAddress+192, 16128);
	do Memory.poke(memAddress+224, 15872);
	do Memory.poke(memAddress+256, -3584);
	do Memory.poke(memAddress+288, -1024);
	do Memory.poke(memAddress+320, -4096);
	do Memory.poke(memAddress+352, -512);
	do Memory.poke(memAddress+384, 16640);
	do Memory.poke(memAddress+416, 25344);
	do Memory.poke(memAddress+448, -512);
	do Memory.poke(memAddress+480, -16384);
	return;
}

	method void flowerright(int location) {
	var int memAddress;
	let memAddress = 16384+location;
	do Memory.poke(memAddress+0, 68);
	do Memory.poke(memAddress+32, 34);
	do Memory.poke(memAddress+64, 113);
	do Memory.poke(memAddress+96, 88);
	do Memory.poke(memAddress+128, 252);
	do Memory.poke(memAddress+160, 255);
	do Memory.poke(memAddress+192, 255);
	do Memory.poke(memAddress+224, 103);
	do Memory.poke(memAddress+256, 103);
	do Memory.poke(memAddress+288, 63);
	do Memory.poke(memAddress+320, 15);
	do Memory.poke(memAddress+352, 127);
	do Memory.poke(memAddress+384, 130);
	do Memory.poke(memAddress+416, 198);
	do Memory.poke(memAddress+448, 127);
	do Memory.poke(memAddress+480, 3);
	return;
}

    method void brick(int location) {
	    var int memAddress;
        let memAddress = 16384+location;
	    do Memory.poke(memAddress+0, -129);
	    do Memory.poke(memAddress+32, -129);
	    do Memory.poke(memAddress+64, -129);
	    do Memory.poke(memAddress+96, -129);
	    do Memory.poke(memAddress+128, -129);
	    do Memory.poke(memAddress+160, 0);
	    do Memory.poke(memAddress+192, -2057);
	    do Memory.poke(memAddress+224, -2057);
	    do Memory.poke(memAddress+256, -2057);
	    do Memory.poke(memAddress+288, -2057);
	    do Memory.poke(memAddress+320, 0);
	    do Memory.poke(memAddress+352, -513);
	    do Memory.poke(memAddress+384, -513);
	    do Memory.poke(memAddress+416, -513);
	    do Memory.poke(memAddress+448, -513);
	    do Memory.poke(memAddress+480, -513);
	    return;
    }

    method void question(int location) {
	var int memAddress;
    let memAddress = 16384+location;
	do Memory.poke(memAddress+0, -1);
	do Memory.poke(memAddress+32, -1);
	do Memory.poke(memAddress+64, -8197);
	do Memory.poke(memAddress+96, -2017);
	do Memory.poke(memAddress+128, -3121);
	do Memory.poke(memAddress+160, -3121);
	do Memory.poke(memAddress+192, -3121);
	do Memory.poke(memAddress+224, -3073);
	do Memory.poke(memAddress+256, -1793);
	do Memory.poke(memAddress+288, -385);
	do Memory.poke(memAddress+320, -385);
	do Memory.poke(memAddress+352, -1);
	do Memory.poke(memAddress+384, -385);
	do Memory.poke(memAddress+416, -8581);
	do Memory.poke(memAddress+448, -1);
	do Memory.poke(memAddress+480, -1);
	return;
    }


	method void square(int location) {
	var int memAddress;
	let memAddress = 16384+location;
	do Memory.poke(memAddress+0, -1);
	do Memory.poke(memAddress+32, -1);
	do Memory.poke(memAddress+64, -4081);
	do Memory.poke(memAddress+96, -4081);
	do Memory.poke(memAddress+128, -16381);
	do Memory.poke(memAddress+160, -16381);
	do Memory.poke(memAddress+192, -16381);
	do Memory.poke(memAddress+224, -16381);
	do Memory.poke(memAddress+256, -16381);
	do Memory.poke(memAddress+288, -16381);
	do Memory.poke(memAddress+320, -16381);
	do Memory.poke(memAddress+352, -16381);
	do Memory.poke(memAddress+384, -4081);
	do Memory.poke(memAddress+416, -4081);
	do Memory.poke(memAddress+448, -1);
	do Memory.poke(memAddress+480, -1);
	return;
	}


	method void coin(int location) {
		var int memAddress;
		let memAddress = 16384+location;
		do Memory.poke(memAddress+0, 2016);
		do Memory.poke(memAddress+32, 3640);
		do Memory.poke(memAddress+64, 6152);
		do Memory.poke(memAddress+96, 6604);
		do Memory.poke(memAddress+128, 12612);
		do Memory.poke(memAddress+160, 12614);
		do Memory.poke(memAddress+192, 24898);
		do Memory.poke(memAddress+224, 24898);
		do Memory.poke(memAddress+256, 24898);
		do Memory.poke(memAddress+288, 24898);
		do Memory.poke(memAddress+320, 24898);
		do Memory.poke(memAddress+352, 12614);
		do Memory.poke(memAddress+384, 12740);
		do Memory.poke(memAddress+416, 6156);
		do Memory.poke(memAddress+448, 7736);
		do Memory.poke(memAddress+480, 2016);
		return;
		}

	method void wall(int location) {
	var int memAddress;
	let memAddress = 16384+location;
	do Memory.poke(memAddress+0, 0);
	do Memory.poke(memAddress+32, 16380);
	do Memory.poke(memAddress+64, 24570);
	do Memory.poke(memAddress+96, 28662);
	do Memory.poke(memAddress+128, 28686);
	do Memory.poke(memAddress+160, 30702);
	do Memory.poke(memAddress+192, 30702);
	do Memory.poke(memAddress+224, 30702);
	do Memory.poke(memAddress+256, 30702);
	do Memory.poke(memAddress+288, 30702);
	do Memory.poke(memAddress+320, 30702);
	do Memory.poke(memAddress+352, 28686);
	do Memory.poke(memAddress+384, 28662);
	do Memory.poke(memAddress+416, 24570);
	do Memory.poke(memAddress+448, 16380);
	do Memory.poke(memAddress+480, 0);
	return;
	}

	method void land(int location) {
	var int memAddress;
	let memAddress = 16384+location;
	do Memory.poke(memAddress+0, -33);
	do Memory.poke(memAddress+32, -65);
	do Memory.poke(memAddress+64, -129);
	do Memory.poke(memAddress+96, -257);
	do Memory.poke(memAddress+128, -513);
	do Memory.poke(memAddress+160, -1025);
	do Memory.poke(memAddress+192, 2047);
	do Memory.poke(memAddress+224, -2049);
	do Memory.poke(memAddress+256, -2049);
	do Memory.poke(memAddress+288, -2049);
	do Memory.poke(memAddress+320, -2050);
	do Memory.poke(memAddress+352, -1027);
	do Memory.poke(memAddress+384, -4613);
	do Memory.poke(memAddress+416, -8457);
	do Memory.poke(memAddress+448, -16529);
	do Memory.poke(memAddress+480, -97);
	return;
}

	method void pipetopleft(int location) {
	var int memAddress;
	let memAddress = 16384+location;
	do Memory.poke(memAddress+0, -1);
	do Memory.poke(memAddress+32, -1);
	do Memory.poke(memAddress+64, -1);
	do Memory.poke(memAddress+96, -1);
	do Memory.poke(memAddress+128, -1);
	do Memory.poke(memAddress+160, -1);
	do Memory.poke(memAddress+192, -1);
	do Memory.poke(memAddress+224, -1);
	do Memory.poke(memAddress+256, -1);
	do Memory.poke(memAddress+288, -1);
	do Memory.poke(memAddress+320, -1);
	do Memory.poke(memAddress+352, -1);
	do Memory.poke(memAddress+384, -1);
	do Memory.poke(memAddress+416, -1);
	do Memory.poke(memAddress+448, -2);
	do Memory.poke(memAddress+480, 0);
	return;
}

	method void pipetopright(int location) {
	var int memAddress;
	let memAddress = 16384+location;
	do Memory.poke(memAddress+0, -1);
	do Memory.poke(memAddress+32, -1);
	do Memory.poke(memAddress+64, -1);
	do Memory.poke(memAddress+96, -1);
	do Memory.poke(memAddress+128, -1);
	do Memory.poke(memAddress+160, -1);
	do Memory.poke(memAddress+192, -1);
	do Memory.poke(memAddress+224, -1);
	do Memory.poke(memAddress+256, -1);
	do Memory.poke(memAddress+288, -1);
	do Memory.poke(memAddress+320, -1);
	do Memory.poke(memAddress+352, -1);
	do Memory.poke(memAddress+384, -1);
	do Memory.poke(memAddress+416, -1);
	do Memory.poke(memAddress+448, 32767);
	do Memory.poke(memAddress+480, 0);
	return;
}

	method void pipeleft(int location) {
	var int memAddress;
	let memAddress = 16384+location;
	do Memory.poke(memAddress+0, -8);
	do Memory.poke(memAddress+32, -8);
	do Memory.poke(memAddress+64, -8);
	do Memory.poke(memAddress+96, -8);
	do Memory.poke(memAddress+128, -8);
	do Memory.poke(memAddress+160, -8);
	do Memory.poke(memAddress+192, -8);
	do Memory.poke(memAddress+224, -8);
	do Memory.poke(memAddress+256, -8);
	do Memory.poke(memAddress+288, -8);
	do Memory.poke(memAddress+320, -8);
	do Memory.poke(memAddress+352, -8);
	do Memory.poke(memAddress+384, -8);
	do Memory.poke(memAddress+416, -8);
	do Memory.poke(memAddress+448, -8);
	do Memory.poke(memAddress+480, -8);
	return;
}

	method void piperight(int location) {
	var int memAddress;
	let memAddress = 16384+location;
	do Memory.poke(memAddress+0, 8191);
	do Memory.poke(memAddress+32, 8191);
	do Memory.poke(memAddress+64, 8191);
	do Memory.poke(memAddress+96, 8191);
	do Memory.poke(memAddress+128, 8191);
	do Memory.poke(memAddress+160, 8191);
	do Memory.poke(memAddress+192, 8191);
	do Memory.poke(memAddress+224, 8191);
	do Memory.poke(memAddress+256, 8191);
	do Memory.poke(memAddress+288, 8191);
	do Memory.poke(memAddress+320, 8191);
	do Memory.poke(memAddress+352, 8191);
	do Memory.poke(memAddress+384, 8191);
	do Memory.poke(memAddress+416, 8191);
	do Memory.poke(memAddress+448, 8191);
	do Memory.poke(memAddress+480, 8191);
	return;
}

	method void cloudleftup(int location) {
	var int memAddress;
	let memAddress = 16384+location;
	do Memory.poke(memAddress+0, 0);
	do Memory.poke(memAddress+32, 0);
	do Memory.poke(memAddress+64, 0);
	do Memory.poke(memAddress+96, 0);
	do Memory.poke(memAddress+128, 0);
	do Memory.poke(memAddress+160, 0);
	do Memory.poke(memAddress+192, 0);
	do Memory.poke(memAddress+224, 0);
	do Memory.poke(memAddress+256, -16384);
	do Memory.poke(memAddress+288, 8192);
	do Memory.poke(memAddress+320, 6144);
	do Memory.poke(memAddress+352, 1024);
	do Memory.poke(memAddress+384, 1024);
	do Memory.poke(memAddress+416, 1024);
	do Memory.poke(memAddress+448, 25088);
	do Memory.poke(memAddress+480, 4352);
	return;
}

method void cloudleftdown(int location) {
	var int memAddress;
	let memAddress = 16384+location;
	do Memory.poke(memAddress+0, 224);
	do Memory.poke(memAddress+32, 16);
	do Memory.poke(memAddress+64, 8);
	do Memory.poke(memAddress+96, 0);
	do Memory.poke(memAddress+128, 6);
	do Memory.poke(memAddress+160, 1);
	do Memory.poke(memAddress+192, 1);
	do Memory.poke(memAddress+224, 2);
	do Memory.poke(memAddress+256, 36);
	do Memory.poke(memAddress+288, 584);
	do Memory.poke(memAddress+320, -14448);
	do Memory.poke(memAddress+352, -1008);
	do Memory.poke(memAddress+384, 12512);
	do Memory.poke(memAddress+416, -32512);
	do Memory.poke(memAddress+448, 17920);
	do Memory.poke(memAddress+480, 14336);
	return;
}

method void cloudrightup(int location) {
	var int memAddress;
	let memAddress = 16384+location;
	do Memory.poke(memAddress+0, 0);
	do Memory.poke(memAddress+32, 0);
	do Memory.poke(memAddress+64, 0);
	do Memory.poke(memAddress+96, 0);
	do Memory.poke(memAddress+128, 0);
	do Memory.poke(memAddress+160, 0);
	do Memory.poke(memAddress+192, 0);
	do Memory.poke(memAddress+224, 0);
	do Memory.poke(memAddress+256, 3);
	do Memory.poke(memAddress+288, 4);
	do Memory.poke(memAddress+320, 8);
	do Memory.poke(memAddress+352, 40);
	do Memory.poke(memAddress+384, 80);
	do Memory.poke(memAddress+416, 130);
	do Memory.poke(memAddress+448, 132);
	do Memory.poke(memAddress+480, 128);
	return;
}

method void cloudrightdown(int location) {
	var int memAddress;
	let memAddress = 16384+location;
	do Memory.poke(memAddress+0, 2304);
	do Memory.poke(memAddress+32, 5376);
	do Memory.poke(memAddress+64, 4608);
	do Memory.poke(memAddress+96, 20480);
	do Memory.poke(memAddress+128, -24576);
	do Memory.poke(memAddress+160, -32767);
	do Memory.poke(memAddress+192, -32767);
	do Memory.poke(memAddress+224, 16384);
	do Memory.poke(memAddress+256, 8194);
	do Memory.poke(memAddress+288, 16385);
	do Memory.poke(memAddress+320, -32701);
	do Memory.poke(memAddress+352, -32706);
	do Memory.poke(memAddress+384, 24604);
	do Memory.poke(memAddress+416, 6400);
	do Memory.poke(memAddress+448, 1731);
	do Memory.poke(memAddress+480, 60);
	return;
}

	method void jumper(int location) {
	var int memAddress;
	let memAddress = 16384+location;
	do Memory.poke(memAddress+0, -1);
	do Memory.poke(memAddress+32, -1);
	do Memory.poke(memAddress+64, 2064);
	do Memory.poke(memAddress+96, 6168);
	do Memory.poke(memAddress+128, 8196);
	do Memory.poke(memAddress+160, 24582);
	do Memory.poke(memAddress+192, 8196);
	do Memory.poke(memAddress+224, 6168);
	do Memory.poke(memAddress+256, 2064);
	do Memory.poke(memAddress+288, 1632);
	do Memory.poke(memAddress+320, -1);
	do Memory.poke(memAddress+352, 32639);
	do Memory.poke(memAddress+384, 32639);
	do Memory.poke(memAddress+416, 0);
	do Memory.poke(memAddress+448, -2057);
	do Memory.poke(memAddress+480, -2057);
	return;
}

	method void eraseblock(int location) {
	var int memAddress;
	let memAddress = 16384+location;
	do Memory.poke(memAddress+0, 0);
	do Memory.poke(memAddress+32, 0);
	do Memory.poke(memAddress+64, 0);
	do Memory.poke(memAddress+96, 0);
	do Memory.poke(memAddress+128, 0);
	do Memory.poke(memAddress+160, 0);
	do Memory.poke(memAddress+192, 0);
	do Memory.poke(memAddress+224, 0);
	do Memory.poke(memAddress+256, 0);
	do Memory.poke(memAddress+288, 0);
	do Memory.poke(memAddress+320, 0);
	do Memory.poke(memAddress+352, 0);
	do Memory.poke(memAddress+384, 0);
	do Memory.poke(memAddress+416, 0);
	do Memory.poke(memAddress+448, 0);
	do Memory.poke(memAddress+480, 0);
	return;
	}


        
}