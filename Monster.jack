class Monster
{
  field Array MonX,MonY;
  field Array direction;
  field Array Montype;
  field Block block;
  field Draw draw;
  field Monster monster;
  field int numMonster;
  field int screenPos;
  field int monLeft,monRight;
  

  constructor Monster new()
  {
    let numMonster = 30;
    let screenPos = 0;
    let monLeft = 0;
    let monRight = 0;

    let block = Block.new();
    /*Set X-position of monster*/
    let MonX = block.getMonX();
    /*Set Y-position of monste*/
    let MonY = block.getMonY();
    /*Set diretion of monster*/
    let direction = block.getDirection();
    /*Type of monster --- 0 - move left or right monster; 1 - flower left monster ; 2 - flower right mosnter ; 3 - flying upwarf monster ; 4 - flying downward monster;*/
    let Montype = block.getMonType();

    do refresh();

    /*Draw the monster*/
    do drawMonster();

    return this;
  }

/*Draw monster picture*/
  method void drawMonster()
  {
      var int i;
      var int switch;
      var int location;
      let i = monLeft;

      do Screen.setColor(true);

      while(i < monRight)
      {
        let switch = Montype[i];
        if(switch = 1)
          {
            let location = (MonY[i]*32) + ((MonX[i]-screenPos)/16);
            do draw.flowerleft(location);
            let location = 0;
          }
        
        if(switch = 2)
          {
            let location = (MonY[i]*32) + ((MonX[i]-screenPos)/16);
            do draw.flowerright(location);
            let location = 0;
          }

        if(switch = 0)
        {
          do drawBlock(MonX[i],MonY[i],16,16);
        }

        if(switch = 3)
        {
          let location = (MonY[i]*32) + ((MonX[i]-screenPos)/16);
          do draw.monster(location);
        }

        if(switch = 4)
        {
          let location = (MonY[i]*32) + ((MonX[i]-screenPos)/16);
          do draw.monster(location);
        }

        let i = i + 1;
      }
      return;
  }

  /*erase monster picture*/
  method void eraseMonster()
  {
      var int i;
      var int location;
      var int switch;
      let i = monLeft;

      do Screen.setColor(false);

      while(i < monRight)
      {
        let switch = Montype[i];
        if(switch = 0)
        {
          do eraseBlock(MonX[i],MonY[i],16,16);
        }

        if(switch = 3)
        {
          let location = (MonY[i]*32) + ((MonX[i]-screenPos)/16);
          do draw.eraseblock(location);
        }

        if(switch = 4)
        {
          let location = (MonY[i]*32) + ((MonX[i]-screenPos)/16);
          do draw.eraseblock(location);
        }

        if(switch = 1)
        {
          let location = (MonY[i]*32) + ((MonX[i]-screenPos)/16);
          do draw.eraseblock(location);
        }

        if(switch = 2)
        {
          let location = (MonY[i]*32) + ((MonX[i]-screenPos)/16);
          do draw.eraseblock(location);
        }

        let i = i + 1;
      }
      return;
  }

  /*Draw i th monster on screen*/
  method void drawidxMonster(int i)
  {     
        var int switch;
        var int location;
        let switch = Montype[i];

        do Screen.setColor(true);
        if(switch = 1)
          {
            let location = (MonY[i]*32) + ((MonX[i]-screenPos)/16);
            do draw.flowerleft(location);
            let location = 0;
          }
        
        if(switch = 2)
          {
            let location = (MonY[i]*32) + ((MonX[i]-screenPos)/16);
            do draw.flowerright(location);
            let location = 0;
          }

        if(switch = 0)
        {
          do drawBlock(MonX[i],MonY[i],16,16);
        }

        if(switch = 3)
        {
          let location = (MonY[i]*32) + ((MonX[i]-screenPos)/16);
          do draw.monster(location);
        }

        if(switch = 4)
        {
          let location = (MonY[i]*32) + ((MonX[i]-screenPos)/16);
          do draw.monster(location);
        }
  
      return;
  }

  /*erase i th monster on screen*/
  method void eraseidxMonster(int i)
  {
        var int location;
        var int switch;
        let switch = Montype[i];
        do Screen.setColor(false);
        if(switch = 0)
        {
          do eraseBlock(MonX[i],MonY[i],16,16);
        }

        if(switch = 3)
        {
          let location = ((MonY[i])*32) + ((MonX[i]-screenPos)/16);
          do draw.eraseblock(location);
        }

        if(switch = 4)
        {
          let location = (MonY[i]*32) + ((MonX[i]-screenPos)/16);
          do draw.eraseblock(location);
        }

        if(switch = 1)
        {
          let location = (MonY[i]*32) + ((MonX[i]-screenPos)/16);
          do draw.eraseblock(location);
        }

        if(switch = 2)
        {
          let location = (MonY[i]*32) + ((MonX[i]-screenPos)/16);
          do draw.eraseblock(location);
        }

      return;
  }

  /*Draw function*/
  method void drawBlock(int curX, int curY, int sizeX, int sizeY)
  {
    do Sprite.drawMon(curX-screenPos, curY);
		//do Screen.drawRectangle(curX-screenPos, curY, curX + (sizeX-1) - screenPos, curY + (sizeY-1) );
		return;
  }

  /*erase function*/
  method void eraseBlock(int curX, int curY, int sizeX, int sizeY)
  {
    //do Sprite.drawMon(curX-screenPos, curY);
		do Screen.drawRectangle(curX-screenPos, curY, curX + (sizeX-1) - screenPos, curY + (sizeY-1) );
		return;
  }

  /*do transition*/
	method void transition(int move)
	{
        do eraseMonster();

        let screenPos = screenPos + move;

        // let MonX[monLeft] = MonX[monLeft] - 32;

        do refresh();

        do drawMonster();

        return;
	}


  /* Add / Delete items according to the screen position */
  method void refresh()
  {

    
    while((monRight < numMonster) & (MonX[monRight] < (screenPos + 512) ) )
    {let monRight = monRight + 1;}

    while((monLeft < monRight) & (MonX[monLeft] < screenPos))
    {let monLeft = monLeft + 1;}


    return;
  }

  /*do monster move by two pixel about its direction*/
  method void update(int i)
  {
    let MonX[i] = MonX[i]-direction[i];
    do refresh();
    return;
  }

  /*change the direction of monster to right*/
  method void changeRight(int i)
  {
      let direction[i] = -2;
      return;
  }

  /*change the direction of monster to left*/
  method void changeLeft(int i)
  {
      let direction[i] = 2;
      return;
  }

  /*let the monster move down*/
  method void movedown(int i)
  {
    do eraseidxMonster(i);
    let MonY[i] = MonY[i] + 4;
    do drawidxMonster(i);

    return;
  }

  /*let the monster move up*/
  method void moveup(int i)
  {
    do eraseidxMonster(i);
    let MonY[i] = MonY[i] - 4;
    do drawidxMonster(i);

    return;
  }

  /*kill the monster*/
  method void kill(int i)
  { 
    do eraseidxMonster(i);
    while(~(i = monLeft) ){
      let MonX[i] = MonX[i-1];
      let MonY[i] = MonY[i-1];
      let Montype[i] = Montype[i-1];
      let direction[i] = direction[i-1];
      let i = i - 1;
      }
    let monLeft = monLeft + 1;
    return;
  }

  /*get the X_postion of i th monster*/
  method int getMonX(int i)
  {
      return MonX[i];
  }

  /*get the Y_position of ith monster*/
  method int getMonY(int i)
  {
      return MonY[i];
  }

  /*get the pointer to the i th monster of left side*/ 
  method int getMonLeft()
  {
      return monLeft;
  }

  /*get the pointer to the i th monster of right side*/
  method int getMonRight()
  {
     return monRight;
  }

  /*get the type of i th monster*/
  method int getMontype(int i)
  {
    return Montype[i];
  }

  /*change the direction of i th monster to upward*/
  method void changeup(int i)
  {
    let Montype[i] = 3;
    return;
  }

  /*change the direction of i th monster to downward*/
  method void changedown(int i)
  {
    let Montype[i] = 4;
    return;
  }
}
